/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 21 09:58:29 GMT 2023
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import org.apache.commons.io.FileCleaner;
import org.apache.commons.io.FileCleaningTracker;
import org.apache.commons.io.FileDeleteStrategy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileCleaner_ESTest extends FileCleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        FileCleaner.track("Stream closed", object0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileDeleteStrategy fileDeleteStrategy0 = new FileDeleteStrategy("\"8Iy");
      // Undeclared exception!
      try { 
        FileCleaner.track((File) mockFile0, (Object) uRI0, fileDeleteStrategy0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDeleteStrategy.ForceFileDeleteStrategy fileDeleteStrategy_ForceFileDeleteStrategy0 = (FileDeleteStrategy.ForceFileDeleteStrategy)FileDeleteStrategy.FORCE;
      // Undeclared exception!
      try { 
        FileCleaner.track((String) null, (Object) null, (FileDeleteStrategy) fileDeleteStrategy_ForceFileDeleteStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileDeleteStrategy fileDeleteStrategy0 = FileDeleteStrategy.NORMAL;
      // Undeclared exception!
      try { 
        FileCleaner.track((File) null, (Object) null, fileDeleteStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        FileCleaner.track((File) mockFile0, (Object) mockFile0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileDeleteStrategy fileDeleteStrategy0 = FileDeleteStrategy.NORMAL;
      // Undeclared exception!
      try { 
        FileCleaner.track("", (Object) "", fileDeleteStrategy0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = FileCleaner.getInstance();
      assertNotNull(fileCleaningTracker0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileCleaner.track((File) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileCleaner fileCleaner0 = new FileCleaner();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        FileCleaner.track((String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileCleaner.exitWhenFinished();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = FileCleaner.getTrackCount();
      assertEquals(0, int0);
  }
}
